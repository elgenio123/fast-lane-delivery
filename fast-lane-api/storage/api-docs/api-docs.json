{
    "openapi": "3.0.0",
    "info": {
        "title": "Fast Lane Delivery API",
        "description": "API Documentation for Fast Lane Delivery and Guesthouse Booking service",
        "contact": {
            "email": "admin@fastlanedelivery.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/bookings": {
            "get": {
                "tags": [
                    "Bookings"
                ],
                "summary": "List user's bookings",
                "description": "Retrieves a list of bookings. Customers see their own bookings. Hosts see bookings for their properties.",
                "operationId": "765b47cd69dd801947e6db98c2448c90",
                "responses": {
                    "200": {
                        "description": "Bookings retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "bookings": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Booking"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Bookings"
                ],
                "summary": "Create a new booking",
                "description": "Allows a customer to book a property for a specified date range.",
                "operationId": "893be3fcfe94b319a05e6e01eed19c8e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "property_id",
                                    "check_in_date",
                                    "check_out_date"
                                ],
                                "properties": {
                                    "property_id": {
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "check_in_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-12-20"
                                    },
                                    "check_out_date": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2025-12-25"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "booking": {
                                            "$ref": "#/components/schemas/Booking"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/delivery-orders": {
            "post": {
                "tags": [
                    "Delivery Orders"
                ],
                "summary": "Create a new delivery order",
                "description": "Allows a customer to create a new delivery request.",
                "operationId": "6afa00ee1d6323fe1e6d8531ab44fa6d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "pickup_address",
                                    "pickup_latitude",
                                    "pickup_longitude",
                                    "dropoff_address",
                                    "dropoff_latitude",
                                    "dropoff_longitude",
                                    "package_description",
                                    "payment_method"
                                ],
                                "properties": {
                                    "pickup_address": {
                                        "type": "string",
                                        "example": "123 Pickup St, Yaoundé"
                                    },
                                    "pickup_latitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 3.866667
                                    },
                                    "pickup_longitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 11.516667
                                    },
                                    "dropoff_address": {
                                        "type": "string",
                                        "example": "456 Dropoff Ave, Yaoundé"
                                    },
                                    "dropoff_latitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 3.875555
                                    },
                                    "dropoff_longitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 11.522222
                                    },
                                    "package_description": {
                                        "type": "string",
                                        "example": "A small document"
                                    },
                                    "payment_method": {
                                        "type": "string",
                                        "enum": [
                                            "mobile_money",
                                            "cash_on_delivery"
                                        ],
                                        "example": "mobile_money"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliveryOrder"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/delivery-orders/{order}": {
            "get": {
                "tags": [
                    "Delivery Orders"
                ],
                "summary": "Get a specific delivery order",
                "description": "Retrieves the details of a single delivery order. Accessible by the customer or the assigned driver.",
                "operationId": "692f9e22fa06adfb37dada7751d23e4a",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the delivery order",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliveryOrder"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Delivery Orders"
                ],
                "summary": "Cancel a delivery order",
                "description": "Allows a customer to cancel their delivery order.",
                "operationId": "fa6f1e147c0695102b228635f7d80877",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the delivery order to cancel",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliveryOrder"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden/Order cannot be cancelled"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/delivery-orders/{order}/accept": {
            "post": {
                "tags": [
                    "Delivery Orders"
                ],
                "summary": "Accept a delivery order",
                "description": "Allows a driver to accept a pending delivery order.",
                "operationId": "8d05b1a7a0529319ee9daa1df7bea705",
                "parameters": [
                    {
                        "name": "order",
                        "in": "path",
                        "description": "ID of the delivery order to accept",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order accepted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeliveryOrder"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden/Order cannot be accepted"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/profile": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get authenticated user's profile",
                "description": "Returns the profile information of the currently logged-in user.",
                "operationId": "29427fc7b6dfe9164a917b13ee09609d",
                "responses": {
                    "200": {
                        "description": "Profile data retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Profile"
                ],
                "summary": "Update authenticated user's profile",
                "description": "Updates the profile information of the currently logged-in user.",
                "operationId": "3a67c8db666da7dd68ac386f5e567641",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe Updated"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "john.updated@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Profile updated successfully."
                                        },
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/properties": {
            "get": {
                "tags": [
                    "Properties"
                ],
                "summary": "List and search for properties",
                "description": "Returns a paginated list of verified properties. Can be filtered by quarter.",
                "operationId": "6e387a77d712ad025ae4dbbe58f9de35",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Property"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Properties"
                ],
                "summary": "Create a new property listing",
                "description": "Allows a host to create a new property. It will be unverified by default.",
                "operationId": "9f76887beafa8292ed82539c80bf512f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "type",
                                    "description",
                                    "address",
                                    "quarter",
                                    "latitude",
                                    "longitude",
                                    "price_per_night"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Cozy Studio Apartment"
                                    },
                                    "type": {
                                        "type": "string",
                                        "enum": [
                                            "guesthouse",
                                            "event_hall",
                                            "apartment"
                                        ],
                                        "example": "apartment"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "A nice and cozy place to stay."
                                    },
                                    "address": {
                                        "type": "string",
                                        "example": "Rue 1.234, Bastos"
                                    },
                                    "quarter": {
                                        "type": "string",
                                        "example": "Bastos"
                                    },
                                    "latitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 3.8711
                                    },
                                    "longitude": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 11.5179
                                    },
                                    "price_per_night": {
                                        "type": "number",
                                        "format": "float",
                                        "example": 25000
                                    },
                                    "amenities": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "Wi-Fi",
                                            "Air Conditioning"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Property created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Forbidden, user is not a host"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/properties/{id}": {
            "get": {
                "tags": [
                    "Properties"
                ],
                "summary": "Get a specific property",
                "description": "Returns details of a specific property by ID.",
                "operationId": "fe8700ea91a142f83d73a651f84758fb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the property",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Properties"
                ],
                "summary": "Update a property",
                "description": "Allows a host to update their property details.",
                "operationId": "4b96210ec02d19e06174634151963abf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the property",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Property"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Property updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Property"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "403": {
                        "description": "Forbidden, user is not the owner of the property"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Properties"
                ],
                "summary": "Delete a property",
                "description": "Allows a host to delete their property.",
                "operationId": "7f9b500db8d8101c62d2b387f1662ab7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the property",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Property deleted successfully"
                    },
                    "403": {
                        "description": "Forbidden, user is not the owner of the property"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/reviews": {
            "get": {
                "tags": [
                    "Reviews"
                ],
                "summary": "List reviews",
                "description": "Retrieves a list of reviews for a specific property or user.",
                "operationId": "a15f7d74fd8a01fc0cba02cc1a871267",
                "parameters": [
                    {
                        "name": "reviewable_id",
                        "in": "query",
                        "description": "ID of the item to retrieve reviews for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "reviewable_type",
                        "in": "query",
                        "description": "Type of item to retrieve reviews for ('property' or 'user')",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "property",
                                "user"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of reviews retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Review"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Reviews"
                ],
                "summary": "Submit a review",
                "description": "Submits a review for a property or a user (e.g., a driver).",
                "operationId": "8a6a12f1ab42f8041b6dd9152e7cc7c0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "reviewable_id",
                                    "reviewable_type",
                                    "rating"
                                ],
                                "properties": {
                                    "reviewable_id": {
                                        "description": "ID of the item to review",
                                        "type": "integer",
                                        "example": 3
                                    },
                                    "reviewable_type": {
                                        "description": "Type of item to review ('property' or 'user')",
                                        "type": "string",
                                        "enum": [
                                            "property",
                                            "user"
                                        ],
                                        "example": "property"
                                    },
                                    "rating": {
                                        "type": "integer",
                                        "maximum": 5,
                                        "minimum": 1,
                                        "example": 5
                                    },
                                    "comment": {
                                        "type": "string",
                                        "example": "Excellent service!",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Review submitted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "review": {
                                            "$ref": "#/components/schemas/Review"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "422": {
                        "description": "Unprocessable Entity (e.g., target not found)"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "description": "Creates a new user account and returns a JWT token.",
                "operationId": "e7cd5d7d2bec3c090f99d9063600b50b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "phone_number"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "secret123"
                                    },
                                    "password_confirmation": {
                                        "type": "string",
                                        "example": "secret123"
                                    },
                                    "phone_number": {
                                        "type": "string",
                                        "example": "+237612345678"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TokenResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login user",
                "description": "Authenticates a user and returns a JWT token.",
                "operationId": "5901742bd641a8d1474bcf8bb2cb7982",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "secret123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "type": "string",
                                            "example": "eyJhbGciOiJIUzI1..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials"
                    }
                }
            }
        },
        "/api/user": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Get authenticated user",
                "description": "Retrieves the authenticated user's details using the JWT token.",
                "operationId": "43339fb897cbfd4a69106f346afd97c6",
                "responses": {
                    "200": {
                        "description": "Authenticated user data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid token"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "description": "Invalidates the JWT token to log the user out.",
                "operationId": "c426006f932e75b0e57a555970770d4f",
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "title": "User",
                "description": "User model schema",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "johndoe@example.com"
                    },
                    "phone_number": {
                        "type": "string",
                        "example": "+237612345678"
                    },
                    "image": {
                        "type": "string",
                        "example": "/uploads/profile/johndoe.jpg",
                        "nullable": true
                    },
                    "email_verified_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-08-13T12:34:56Z",
                        "nullable": true
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "secret123"
                    },
                    "type": {
                        "description": "User type",
                        "type": "string",
                        "enum": [
                            "customer",
                            "driver",
                            "host",
                            "admin"
                        ],
                        "example": "customer"
                    },
                    "remember_token": {
                        "type": "string",
                        "example": "xyz123token",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-08-10T14:23:00Z"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-08-13T09:45:00Z"
                    }
                },
                "type": "object"
            },
            "TokenResponse": {
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1..."
                    }
                },
                "type": "object"
            },
            "Booking": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "customer_id": {
                        "type": "integer",
                        "example": 12
                    },
                    "property_id": {
                        "type": "integer",
                        "example": 3
                    },
                    "check_in_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-12-20"
                    },
                    "check_out_date": {
                        "type": "string",
                        "format": "date",
                        "example": "2025-12-25"
                    },
                    "total_price": {
                        "type": "number",
                        "format": "float",
                        "example": 250000
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "confirmed",
                            "cancelled",
                            "completed"
                        ],
                        "example": "pending"
                    },
                    "payment_status": {
                        "type": "string",
                        "example": "unpaid"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "DeliveryOrder": {
                "title": "Delivery Order Schema",
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "customer_id": {
                        "type": "integer"
                    },
                    "driver_id": {
                        "type": "integer",
                        "nullable": true
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "accepted",
                            "in_transit",
                            "delivered",
                            "cancelled"
                        ]
                    },
                    "pickup_address": {
                        "type": "string"
                    },
                    "dropoff_address": {
                        "type": "string"
                    },
                    "estimated_fare": {
                        "type": "number",
                        "format": "float"
                    },
                    "payment_method": {
                        "type": "string",
                        "enum": [
                            "mobile_money",
                            "cash_on_delivery"
                        ]
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "Property": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "host_id": {
                        "type": "integer",
                        "example": 2
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "guesthouse",
                            "event_hall",
                            "apartment"
                        ],
                        "example": "guesthouse"
                    },
                    "name": {
                        "type": "string",
                        "example": "Villa Krystal"
                    },
                    "description": {
                        "type": "string",
                        "example": "A beautiful villa with a pool."
                    },
                    "address": {
                        "type": "string",
                        "example": "Rue 1.111, Nkolbisson"
                    },
                    "quarter": {
                        "type": "string",
                        "example": "Nkolbisson"
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": 3.8711
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": 11.5179
                    },
                    "price_per_night": {
                        "type": "number",
                        "format": "float",
                        "example": 50000
                    },
                    "amenities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Wi-Fi",
                            "Pool",
                            "Air Conditioning"
                        ]
                    },
                    "photos": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "uri"
                        },
                        "example": [
                            "http://example.com/img1.jpg"
                        ]
                    },
                    "is_verified": {
                        "type": "boolean",
                        "readOnly": true,
                        "example": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object"
            },
            "Review": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "readOnly": true,
                        "example": 1
                    },
                    "reviewer_id": {
                        "type": "integer",
                        "example": 12
                    },
                    "reviewable_id": {
                        "description": "ID of the item being reviewed (e.g., property_id, user_id)",
                        "type": "integer",
                        "example": 3
                    },
                    "reviewable_type": {
                        "description": "Model name of the item being reviewed",
                        "type": "string",
                        "example": "App\\Models\\Property"
                    },
                    "rating": {
                        "type": "integer",
                        "maximum": 5,
                        "minimum": 1,
                        "example": 5
                    },
                    "comment": {
                        "type": "string",
                        "example": "It was a wonderful experience!",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Login with email and password to get the authentication token",
                "name": "Token based Based",
                "in": "header",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Bookings",
            "description": "Bookings"
        },
        {
            "name": "Delivery Orders",
            "description": "Delivery Orders"
        },
        {
            "name": "Profile",
            "description": "Profile"
        },
        {
            "name": "Properties",
            "description": "Properties"
        },
        {
            "name": "Reviews",
            "description": "Reviews"
        },
        {
            "name": "Authentication",
            "description": "Authentication"
        }
    ]
}